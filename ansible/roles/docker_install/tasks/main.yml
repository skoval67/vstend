---
# tasks file for docker_install
- name: Install requirements
  ansible.builtin.pip:
    name: jsondiff

- name: Tasks for debian-like OS
  when: ansible_os_family == 'Debian'
  block:
    - name: Install requirements
      ansible.builtin.apt:
        name: "{{ requirements.Debian }}"
        state: present

    - name: Wait for APT Lock
      ansible.builtin.shell: |
        while sudo fuser /var/lib/{{ item }} >/dev/null 2>&1; do sleep 5; done;
      loop:
        - dpkg/lock
        - dpkg/lock-frontend
        - apt/lists/lock
      retries: 5
      delay: 3
      changed_when: false

    - name: Add Dockerâ€™s official GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
        state: present

    - name: "Install Docker Engine, containerd, and Docker Compose"
      ansible.builtin.apt:
        name: "{{ dpackages }}"
        state: present
        update_cache: true

- name: Tasks for CentOS-like OS
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'AlmaLinux'
  block:
    - name: Install requirements
      ansible.builtin.dnf:
        name: "{{ requirements.CentOS }}"
        state: present

    - name: Add Docker repository
      ansible.builtin.command: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      changed_when: false

    - name: "Install Docker Engine, containerd, and Docker Compose"
      ansible.builtin.dnf:
        name: "{{ dpackages }}"
        state: present
        update_cache: true

- name: "Enable docker service"
  ansible.builtin.service:
    name: docker
    enabled: true
    state: started

- name: Init a new swarm
  when: init_swarm
  run_once: true
  community.docker.docker_swarm:
    state: present
    advertise_addr: "{{ ifname }}"

- name: Create networks
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
  loop: "{{ networks }}"
